
package GENDB::Remote::Client::WebServices;

=head1 NAME

GENDB::Remote::Client::WebServices

=head1 DESCRIPTION

This package implements the GenDB webservices method for a client. All
methods are directly translated into SOAP calls using the SOAP::Lite
module; therefore, this package provides the messaging layer that is
needed to perform remote analysis of genomic sequence data. Additionally,
server responses are checked for probable errors (server unreachable, 
reply doesn't match expected format).

=head2 Available methods

=over 4

=cut

use strict;
use warnings;

use SOAP::Lite;

=item * GENDB::Remote::Client::WebServices B<new>()

Constructs a new GENDB::Remote::Client::WebServices object.

  RETURNS: the new object.

=cut

sub new {
    my ($class) = @_;
    my $self = {};
    bless($self, $class);
    return $self;
}

=item * REF ON ARRAY B<info>($wsdlfile)

List remotely provided tools.

  RETURNS: reference on an array (of hashes)

=cut

sub info {
    my ($self, $wsdl) = @_;
    my $result;

    eval {
        $result = SOAP::Lite
             ->service($wsdl)
             ->info();
    };
    if ($@) {
        return undef;
    }
    unless (scalar(@{$result})) {
        return undef;
    }
    return $result;
}

=item * REF ON ARRAY B<submit>($wsdlfile, $toolid, $inputs)

Submit sequence data to a remote site to be processed with the
tool identified by $toolid. 

  RETURNS: REF ON ARRAY (of job ids)

=cut

sub submit {
    my ($self, $wsdl, $toolid, $inputs) = @_;

    my %request = ( tool_id => $toolid, input => $inputs );
    my $result;

    eval {
        $result = SOAP::Lite
            ->service($wsdl)
            ->submit(\%request);
    };
    if ($@) {
        return undef;
    }
    unless (scalar(@{$result})) {
        return undef;
    }

    return $result;
}

=item * REF ON ARRAY B<status>($wsdlfile, $job_ids)

Query a remote site for the job status of the jobs identified
by $job_ids (reference on array of job ids).

  RETURNS: reference on an array (of job states)

=cut

sub status {
    my ($self, $wsdl, $job_ids) = @_;
    my $result;

    eval {
        $result = SOAP::Lite
            ->service($wsdl)
            ->status($job_ids);
    };
    if (@$) {
        return undef;
    }

    unless (defined($result)) {
        return undef; 
    }
    unless (scalar(@{$result})) {
        return undef;
    }

    return $result;
}

=item * B<result>($wsdlfile, $job_ids)

Fetch the output of remote jobs from a remote site.

  RETURNS: reference on array (of raw output)

=cut

sub result {
    my ($self, $wsdl, $job_ids) = @_;
    my $result;

    eval {
        $result = SOAP::Lite
            ->service($wsdl)
            ->result($job_ids);
    };
    if ($@) {
        return undef;
    }
    unless (scalar(@{$result})) {
        return undef;
    }
    return $result;
}

=item * BOOL B<cancel>($job_ids)

Cancel remote jobs.

  job_ids: reference on an array of job ids

  RETURNS: true, if the jobs were cancelled; false otherwise.

=cut

sub cancel {
    my ($self, $wsdl, $job_ids) = @_;

    eval {
        my $result = SOAP::Lite
            ->service($wsdl)
            ->cancel($job_ids);
    };
    if ($@) {
        return 0;
    }
    return 1;

}

=item * STRING B<run>($wsdlfile, $toolid, $input, %attributes)

Remotely execute a single tool using the input given in $input
and additional parameters in %attributes.

  RETURNS: tool output as generated by the server

=cut

sub run {
    my ($self, $wsdl, $toolid, $input, %attributes) = @_;

    my %request = ( attributes => \%attributes,
                    tool_id => $toolid,
                    input => $input );

    my $result;
    eval {
        $result = SOAP::Lite
            ->service($wsdl)
            ->run(\%request);
    };
    if ($@) {
        return undef;
    }

    return $result;
}

1;

=back

